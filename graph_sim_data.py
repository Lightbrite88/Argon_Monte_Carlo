from cProfile import label
import matplotlib.pyplot as plt
import numpy as np
import random
import math
import sys
import time
import tracemalloc
import linecache
import os
from scipy import stats
from scipy.optimize import curve_fit

x_data = [0.00e+00, 5.00e-09, 1.00e-08, 1.50e-08, 2.00e-08, 2.50e-08, 3.00e-08, 3.50e-08, 
 4.00e-08, 4.50e-08, 5.00e-08, 5.50e-08, 6.00e-08, 6.50e-08, 7.00e-08, 7.50e-08,
 8.00e-08, 8.50e-08, 9.00e-08, 9.50e-08, 1.00e-07, 1.05e-07, 1.10e-07, 1.15e-07,
 1.20e-07, 1.25e-07, 1.30e-07, 1.35e-07, 1.40e-07, 1.45e-07, 1.50e-07, 1.55e-07,
 1.60e-07, 1.65e-07, 1.70e-07, 1.75e-07, 1.80e-07, 1.85e-07, 1.90e-07, 1.95e-07,
 2.00e-07, 2.05e-07, 2.10e-07, 2.15e-07, 2.20e-07, 2.25e-07, 2.30e-07, 2.35e-07,
 2.40e-07, 2.45e-07, 2.50e-07, 2.55e-07, 2.60e-07, 2.65e-07, 2.70e-07, 2.75e-07,
 2.80e-07, 2.85e-07, 2.90e-07, 2.95e-07, 3.00e-07, 3.05e-07, 3.10e-07, 3.15e-07,
 3.20e-07, 3.25e-07, 3.30e-07, 3.35e-07, 3.40e-07, 3.45e-07, 3.50e-07, 3.55e-07,
 3.60e-07, 3.65e-07, 3.70e-07, 3.75e-07, 3.80e-07, 3.85e-07, 3.90e-07, 3.95e-07,
 4.00e-07, 4.05e-07, 4.10e-07, 4.15e-07, 4.20e-07, 4.25e-07, 4.30e-07, 4.35e-07,
 4.40e-07, 4.45e-07, 4.50e-07, 4.55e-07, 4.60e-07, 4.65e-07, 4.70e-07, 4.75e-07,
 4.80e-07, 4.85e-07, 4.90e-07, 4.95e-07, 5.00e-07, 5.05e-07, 5.10e-07, 5.15e-07,
 5.20e-07, 5.25e-07, 5.30e-07, 5.35e-07, 5.40e-07, 5.45e-07, 5.50e-07, 5.55e-07,
 5.60e-07, 5.65e-07, 5.70e-07, 5.75e-07, 5.80e-07, 5.85e-07, 5.90e-07, 5.95e-07,
 6.00e-07, 6.05e-07, 6.10e-07, 6.15e-07, 6.20e-07, 6.25e-07, 6.30e-07, 6.35e-07,
 6.40e-07, 6.45e-07, 6.50e-07, 6.55e-07, 6.60e-07, 6.65e-07, 6.70e-07, 6.75e-07,
 6.80e-07, 6.85e-07, 6.90e-07, 6.95e-07, 7.00e-07, 7.05e-07, 7.10e-07, 7.15e-07,
 7.20e-07, 7.25e-07, 7.30e-07, 7.35e-07, 7.40e-07, 7.45e-07, 7.50e-07, 7.55e-07,
 7.60e-07, 7.65e-07, 7.70e-07, 7.75e-07, 7.80e-07, 7.85e-07, 7.90e-07, 7.95e-07,
 8.00e-07, 8.05e-07, 8.10e-07, 8.15e-07, 8.20e-07, 8.25e-07, 8.30e-07, 8.35e-07,
 8.40e-07, 8.45e-07, 8.50e-07, 8.55e-07, 8.60e-07, 8.65e-07, 8.70e-07, 8.75e-07,
 8.80e-07, 8.85e-07, 8.90e-07, 8.95e-07, 9.00e-07, 9.05e-07, 9.10e-07, 9.15e-07,
 9.20e-07, 9.25e-07, 9.30e-07, 9.35e-07, 9.40e-07, 9.45e-07, 9.50e-07, 9.55e-07,
 9.60e-07, 9.65e-07, 9.70e-07, 9.75e-07, 9.80e-07, 9.85e-07, 9.90e-07, 9.95e-07]

y_data = np.array([1.38279494e+07, 1.25711639e+07, 1.15507051e+07, 1.08431429e+07,
9.99378461e+06, 9.15718800e+06, 8.53801197e+06, 7.93632413e+06,
7.33652690e+06, 6.98581803e+06, 6.49993028e+06, 6.01971438e+06,
5.52720948e+06, 5.23369168e+06, 4.86218607e+06, 4.54598091e+06,
4.26947864e+06, 4.02369884e+06, 3.67818917e+06, 3.44044448e+06,
3.27548843e+06, 3.05759519e+06, 2.83781133e+06, 2.69885122e+06,
2.48852043e+06, 2.31411131e+06, 2.17420588e+06, 2.03997230e+06,
1.92228159e+06, 1.88352401e+06, 1.69635324e+06, 1.63207237e+06,
1.50965513e+06, 1.40519872e+06, 1.30594149e+06, 1.23031694e+06,
1.18116098e+06, 1.09182948e+06, 1.02140411e+06, 9.65631004e+05,
9.29709342e+05, 8.30924770e+05, 7.90749227e+05, 7.31194892e+05,
6.98581803e+05, 6.56515646e+05, 6.21539290e+05, 6.05941727e+05,
5.54895154e+05, 4.94395512e+05, 5.23227372e+05, 4.91086938e+05,
4.35313830e+05, 4.02700742e+05, 4.05064009e+05, 3.47872941e+05,
3.37947219e+05, 3.19041081e+05, 3.12896586e+05, 2.75556963e+05,
2.71303082e+05, 2.48615716e+05, 2.28291618e+05, 2.19783856e+05,
2.04186292e+05, 1.97096490e+05, 2.01823024e+05, 1.72518510e+05,
1.63538095e+05, 1.55502986e+05, 1.46049917e+05, 1.46522570e+05,
1.36596848e+05, 1.28561739e+05, 1.26198472e+05, 1.12491522e+05,
9.83119182e+04, 9.07494629e+04, 8.31870077e+04, 7.60972059e+04,
6.94800576e+04, 7.60972059e+04, 7.89331266e+04, 6.47535230e+04,
6.00269885e+04, 6.23902558e+04, 6.04996420e+04, 5.10465729e+04,
5.24645333e+04, 4.67926918e+04, 4.96286125e+04, 4.53747315e+04,
3.21404348e+04, 4.44294246e+04, 4.39567711e+04, 3.02498210e+04,
2.97771675e+04, 2.97771675e+04, 3.21404348e+04, 2.78865537e+04,
2.83592072e+04, 3.11951279e+04, 2.22147123e+04, 1.89061381e+04,
1.70155243e+04, 1.89061381e+04, 1.89061381e+04, 1.37069501e+04,
1.60702174e+04, 8.98041560e+03, 1.60702174e+04, 1.46522570e+04,
1.41796036e+04, 1.22889898e+04, 1.22889898e+04, 1.13436829e+04,
1.08710294e+04, 8.50776215e+03, 8.98041560e+03, 7.56245525e+03,
7.08980179e+03, 6.61714834e+03, 8.50776215e+03, 6.14449489e+03,
6.61714834e+03, 3.78122762e+03, 8.50776215e+03, 6.14449489e+03,
5.67184143e+03, 2.83592072e+03, 5.19918798e+03, 7.08980179e+03,
3.30857417e+03, 3.30857417e+03, 4.25388108e+03, 4.25388108e+03,
1.89061381e+03, 5.19918798e+03, 2.83592072e+03, 3.30857417e+03,
2.36326726e+03, 3.30857417e+03, 2.83592072e+03, 1.41796036e+03,
1.89061381e+03, 1.89061381e+03, 1.89061381e+03, 1.41796036e+03,
3.30857417e+03, 1.41796036e+03, 2.36326726e+03, 1.41796036e+03,
1.41796036e+03, 3.30857417e+03, 1.41796036e+03, 0.00000000e+00,
9.45306906e+02, 1.41796036e+03, 1.89061381e+03, 4.72653453e+02,
1.41796036e+03, 4.72653453e+02, 9.45306906e+02, 1.41796036e+03,
9.45306906e+02, 1.41796036e+03, 0.00000000e+00, 9.45306906e+02,
4.72653453e+02, 4.72653453e+02, 1.41796036e+03, 0.00000000e+00,
0.00000000e+00, 0.00000000e+00, 9.45306906e+02, 0.00000000e+00,
0.00000000e+00, 4.72653453e+02, 4.72653453e+02, 0.00000000e+00,
9.45306906e+02, 0.00000000e+00, 4.72653453e+02, 9.45306906e+02,
0.00000000e+00, 4.72653453e+02, 4.72653453e+02, 0.00000000e+00,
4.72653453e+02, 4.72653453e+02, 0.00000000e+00, 0.00000000e+00,
0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.72653453e+02])

#Intended curve for fitting (exponential decay)
def fit_function(x, a, b):
    return a * np.exp(b * np.array(x))

print(type(x_data))
print(type(x_data[0]))
print(type(y_data))
print(type(y_data[0]))
print(type(10**6))
print(y_data.shape)

# prep figure
num_bins = 200
fig = plt.figure(figsize=(5*(1+1),5))
ax = fig.add_subplot(1, 1, 1)
popt, pcov = curve_fit(fit_function, x_data, y_data, p0=[14.0, -11.0], maxfev=25000) #po is first guess, maxfev is number of guesses
print(popt)
ax.plot(x_data, fit_function(x_data, *popt), 'r--', label='fit: a=%5.8f, b=%5.8f' % tuple(popt))
ax.set_xlabel('Path length before collision (m)')
ax.set_ylabel('Probability')
ax.legend()
plt.show()